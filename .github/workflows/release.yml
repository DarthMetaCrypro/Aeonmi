name: Release

on:
  push:
    tags:
      - "v*.*.*"

jobs:
  build:
    name: Build release binaries
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            artifact: aeonmi_project-linux-x86_64
            bin_path: target/release/aeonmi_project
          - os: windows-latest
            artifact: aeonmi_project-windows-x86_64.exe
            bin_path: target/release/aeonmi_project.exe
          - os: macos-latest
            artifact: aeonmi_project-macos-universal
            bin_path: target/release/aeonmi_project

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
      - name: Install sccache
        if: runner.os != 'Windows'
        run: |
          curl -L https://github.com/mozilla/sccache/releases/latest/download/sccache-${{ runner.os == 'macOS' && 'aarch64-apple-darwin' || 'x86_64-unknown-linux-musl' }}.tar.gz -o sccache.tgz || true
          tar -xzf sccache.tgz 2>/dev/null || true
          sudo mv sccache*/sccache /usr/local/bin/sccache || true
      - name: Install sccache (Windows)
        if: runner.os == 'Windows'
        run: |
          choco install -y sccache || echo "sccache install skipped"
      - name: Configure sccache
        run: |
          echo "RUSTC_WRAPPER=sccache" >> $GITHUB_ENV
          echo "SCCACHE_CACHE_SIZE=2G" >> $GITHUB_ENV

      - name: Cache cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Build (release)
        run: cargo build --release --locked

      - name: Package artifact
        shell: bash
        run: |
          mkdir -p dist
          cp "${{ matrix.bin_path }}" "dist/${{ matrix.artifact }}"

      - name: Upload artifact to workflow
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact }}
          path: dist/${{ matrix.artifact }}

  publish:
    name: Publish GitHub Release
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            dist/**/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
